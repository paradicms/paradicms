[tool.poetry]
name = "paradicms-etl"
version = "0.0.1"
description = "Paradicms Extract-Transform-Load (ETL) library"
authors = ["Minor Gordon <info@paradicms.org>"]
license = "GPLv3"

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
ConfigArgParse = "^1.5.3"
markdown-it-py = { extras = ["plugins"], version = "^2.0.1" }
pathvalidate = "^2.5.0"
Pillow = "^9.0.1"
PyYAML = "^6.0"
pyformance = "^0.4"
rdflib = "^6.1.1"
stringcase = "^1.2.0"
tqdm = "^4.62.3"
openpyxl = "^3.1.1"
inflector = "^3.1.0"
more-itertools = "^9.1.0"
beautifulsoup4 = "^4.12.2"
dataclasses-json = "^0.5.13"

[tool.poetry.dev-dependencies]
black = "^22.3.0"
flake8 = "^4.0.1"
mypy = "^0.931"
pytest = "^7.0.1"
types-PyYAML = "^6.0.5"
ruff = "^0.0.285"

[tool.poetry.group.dev.dependencies]
setuptools = "^68.0.0"

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "bs4",
    "configargparse",
    "inflector",
    "openpyxl",
    "pyformance",
    "stringcase",
    "tqdm",
]
ignore_missing_imports = true


[tool.ruff]
ignore = [
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls,
    "ANN204", # Missing return type annotation for __init__
    "COM812", # Trailing comma missing
    "D",      # Missing docstrings
    "E501",   # Line too long
    "EM102",  # Exception must not use an f-string literal
    "ERA001", # Commented-out code
    "FA",     # Missing from __future__ import annotations
    "I001",   # Import block is un-sorted or un-formatted
    "ICN001", # Pandas should be imported as pd
    "N815",   # Mixed-case variables
    "PTH123", # open -> Path.open
    "S101",   # assert
    "TRY003", # Avoid specifying long messages outside the exception class
]
select = ["ALL"]
src = ["paradicms_etl"]
target-version = "py310"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.isort]
known-first-party = ["target_rdf"]

[tool.ruff.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"
