[tool.poetry]
name = "paradicms-ssg"
version = "0.0.1"
description = ""
authors = ["Minor G. <minorg@server.fake>"]
license = "GPLv3"

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
boto3 = "1.16.11"

[tool.poetry.dev-dependencies]
black = "^22.1.0"
boto3-stubs = "1.16.11.0"
flake8 = "^4.0.1"
mypy = "^0.931"
mypy-boto3-cloudfront = "1.16.11.0"
mypy-boto3-route53 = "1.16.11.0"
mypy-boto3-s3 = "1.16.11.0"
paradicms-etl = { path = "../etl", develop = true }
pytest = "^7.0.1"
types-pyyaml = "^6.0.12.8"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.285"

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["configargparse", "PIL", "tqdm"]
ignore_missing_imports = true

[tool.ruff]
ignore = [
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls,
    "ANN204", # Missing return type annotation for __init__
    "COM812", # Trailing comma missing
    "D",      # Missing docstrings
    "E501",   # Line too long
    "EM102",  # Exception must not use an f-string literal
    "ERA001", # Commented-out code
    "FA",     # Missing from __future__ import annotations
    "I001",   # Import block is un-sorted or un-formatted
    "ICN001", # Pandas should be imported as pd
    "N815",   # Mixed-case variables
    "S101",   # assert
    "TRY003", # Avoid specifying long messages outside the exception class
]
select = ["ALL"]
src = ["paradicms_ssg"]
target-version = "py310"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.isort]
known-first-party = ["target_rdf"]

[tool.ruff.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"
